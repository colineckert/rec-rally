// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider     = "mysql"
  url          = env("DATABASE_URL")
  relationMode = "prisma"
}

model Post {
  id        String   @id @default(uuid())
  userId    String
  type      PostType @default(SOCIAL)
  content   String
  createdAt DateTime @default(now())

  user  User   @relation(fields: [userId], references: [id], onDelete: Cascade)
  likes Like[]

  homeTeamId String?
  awayTeamId String?
  homeScore  Int?    @default(0)
  awayScore  Int?    @default(0)

  // Comment   Comment[]

  @@unique([createdAt, id])
  @@index([userId])
}

enum PostType {
  SOCIAL
  GAME_RECAP
  GAME_INVITE
}

// TODO: Add comments
// model Comment {
//   id     String
//   Post   Post   @relation(fields: [postId], references: [id]) // A comment can have one post
//   postId String
// }

model Like {
  userId String
  postId String
  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade)
  post   Post   @relation(fields: [postId], references: [id], onDelete: Cascade)

  @@id([userId, postId])
  @@index([userId])
  @@index([postId])
}

// Necessary for Next auth
model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?
  user              User    @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
  @@index([userId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId])
}

model User {
  id            String    @id @default(cuid())
  name          String?
  email         String?   @unique
  emailVerified DateTime?
  image         String?
  accounts      Account[]
  sessions      Session[]

  // Non-Next Auth
  posts     Post[]
  likes     Like[]
  followers User[] @relation(name: "Followers")
  follows   User[] @relation(name: "Followers")

  position     String?
  managedTeams Team[]   @relation(name: "TeamManager")
  playerTeams  Team[]   @relation(name: "TeamPlayers")
  leagues      League[]
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

model Team {
  id          String   @id @default(cuid())
  name        String
  image       String?
  description String?
  managerId   String
  createdAt   DateTime @default(now())

  manager  User    @relation(name: "TeamManager", fields: [managerId], references: [id], onDelete: Cascade)
  players  User[]  @relation(name: "TeamPlayers")
  league   League? @relation(fields: [leagueId], references: [id])
  leagueId String?

  @@unique([name, id])
  @@index([managerId])
  @@index([leagueId])
}

model League {
  id          String   @id @default(cuid())
  name        String
  description String?
  createdAt   DateTime @default(now())

  managerId String?
  manager   User?   @relation(fields: [managerId], references: [id], onDelete: Cascade)
  teams     Team[]

  @@unique([name, id])
  @@index([managerId])
}

model Game {
  id         String   @id @default(cuid())
  homeTeamId String
  awayTeamId String
  homeScore  Int?     @default(0)
  awayScore  Int?     @default(0)
  date       DateTime @default(now())
  location   String?
  createdAt  DateTime @default(now())
  leagueId   String?

  @@unique([homeTeamId, awayTeamId, date])
  @@index([homeTeamId])
  @@index([awayTeamId])
}
